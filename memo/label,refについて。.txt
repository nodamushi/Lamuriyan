HTMLに変換するという目的がある以上、labelやrefで単にrefstepcounterで増加させたカウンターの値を出力するだけでは不十分である。<a>によるリンクを張りたい。
そのためには、リンク先のidが必要である。

目下の問題点として
1.どのノードのidを取得するか
2.idがない場合どうするか
3.先にrefが使われて、まだlabelが定義されていない場合、どうするか

まず、３の問題点より、TeXを処理している最中に<a>に変換することはまず不可能である。コンバーターを用いるほかない。実際TeXでも二度のコンパイル処理を必要とする。よって、\ref{labelname}は、<reflabel name="labelname"/>というノードを出力することにする。コンバーターはname属性の値から該当するラベルの情報を取得し、<a>に変換する。

しかし、図2.2などの様になっている際、2.2の部分のみにリンクが張られるのは微妙に不満である。第1章の1だけにリンクが張られるのは不満である。
しかし、第\ref{sec:1}章とすでに書いているTeXコードとの互換性もとりたい。
そこで、\ref[第,章]{sec:1}というように、オプションとして前後に付ける文字列を,区切りで入力することにする。この情報はreflabelのvalueとして登録しておくことにする。

さらにいえば、「概要」などのようにカウンター番号を持たない物に対しても\refを張りたい。それはそれ、これはこれでコマンドを分ければいいのかもしれないが、複数の似たようなコマンドを普段よく使うコマンドで使い分けるのは嫌だ。nTeXの最大の目的は楽に記事を書くことである。コマンドは少ない方がいい。よって、「概要」などカウンターとは関係ない物にもラベルを貼り、\refでリンクを張れる様にしたい。

よって、labelで保存すべきはカウンターの数値ではなく、何らかの対象の文字列とその対象のidである。

そこで、labelを付加可能な対象が現れたとき、その対象は\labelableコマンドを発行することにする。
\labelable[#1]#2コマンドは第一引数に、リンクのIDを取得すべきノードを保持したコマンドシーケンスを、第二引数にリンク時に表示される文字を渡す。
第一引数が省略された場合は、最後に追加されたノードが対象である。これを発行する段階ではidの生成は行わない。（ユーザーが自分でidを定義した場合はこれに従わない)
\labelableはグループにlabelableというコマンドシーケンスを定義し、Labelクラスのオブジェクトを登録する。\を付けない為、ユーザーからは不可視である。

\labelは、labelableに登録されているLabelクラスのインスタンスから、RefTargetクラスのインスタンスを生成し、RootDocumentにRefTargetインスタンスを登録する。RefTargetが生成された時点で、対象ノードにidが設定されていない場合はユニークなidを指定する。これはなるべく余計なidを増やさない為である。すでにidが指定されている場合は再指定は行わない。RootDocumentはRefTargetのラベル名が重複した場合は、後に宣言された方を優先する。（基本的に重複は許さない）

コンバーターはRootDocumentに登録されたRefTargetから対象ノードとidとリンク文字を取得し、リンクを生成する。


しかし、この方法ではコンパイルを実行するたびにリンク先が変わってしまう問題がある。webに乗せる以上、どこにリンクが張られるかなど分かった物ではなく、出来ることならidの変更はしたくない。（むろん、ユーザーが強制的に変化させた場合はそれに従う必要があるが）
そこで、いわゆる.auxファイルのような物を生成する必要がある。

ここにはlatexだと\newlabelというコマンドが書かれている。nTeXでは、前もってラベルのidを指定しておくという意味を込めて\prenewlabel#1#2コマンドを発行することにする。引数は第一引数がラベル名、第二引数がid名である。これは、nTeXEngineにラベル名をキーとするマップにid名を登録するコマンドである。RefTargetは、nTeXEngineからラベル名に対応するid名が登録されている場合は、この名前を用いることにする。これらの名前決定をRefTargetが行うのも妙なので、nTeXEngineが全ての責任を負い、createIDNameというメソッドで対象ノードのID取得か生成かマップから読み込むかを行う物とする。



コンバーターは<a class="ref" href="#id">リンク文字列</a>という要素を作成し、href属性変換元のTeXIDおよび変換されたIDを保持するRefLinkObjectクラスのインスタンスを作成し、HTMLConverterに登録する。この作業は、後の操作でページ分割した際に、単純にhref="#id"ではリンクを張れなくなる場合の対処をするためである。IDとhrefの属性があれば、親となるページが同じかどうか判断し、違うならばhref要素だけ内容を書き換えればよい。



以上がnTeXにおける、labelとrefの処理の概要である。
